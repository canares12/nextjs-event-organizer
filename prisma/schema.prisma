generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model User {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    clerkId   String   @unique
    email     String   @unique
    username  String   @unique
    firstName String?
    lastName  String?
    photo     String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    events    Event[]
    orders    Order[]

    @@map("users")
}

model Event {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    title         String
    description   String?
    location      String?
    imageUrl      String?
    startDateTime DateTime  @default(now())
    endDateTime   DateTime  @default(now())
    price         Int?
    isFree        Boolean   @default(false)
    url           String?
    categoryId    String?   @db.ObjectId
    category      Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    organizerId   String    @db.ObjectId
    user          User      @relation(fields: [organizerId], references: [id], onDelete: Cascade)
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    orders        Order[]

    @@map("events")
}

model Category {
    id     String  @id @default(auto()) @map("_id") @db.ObjectId
    name   String  @unique
    events Event[]

    @@map("categories")
}

model Order {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    totalAmount Int
    eventId     String   @db.ObjectId
    event       Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)
    buyerId     String   @db.ObjectId
    user        User     @relation(fields: [buyerId], references: [id], onDelete: Cascade)
    createdAt   DateTime @default(now())

    @@map("orders")
}
